{"ast":null,"code":"import { ADD_TO_CART, UPDATE_PRODUCT_QUANTITY, REMOVE_PRODUCT_FROM_CART } from \"../actions/cart\";\n\nfunction cartReducer(state = [], action) {\n  switch (action.type) {\n    case ADD_TO_CART:\n      {\n        const {\n          product: productToAdd,\n          quantity = 1\n        } = action.payload;\n        const productsInCart = [...state];\n        let isProductInCart = false;\n\n        for (let i = 0; i < productsInCart.length; i++) {\n          const product = productsInCart[i];\n\n          if (product.id === productToAdd.id) {\n            product.quantity = product.quantity + parseInt(quantity);\n            isProductInCart = true;\n            break;\n          }\n        }\n\n        if (!isProductInCart) {\n          productToAdd.quantity = parseInt(quantity);\n          productsInCart.push(productToAdd);\n        }\n\n        return productsInCart;\n      }\n\n    case UPDATE_PRODUCT_QUANTITY:\n      {\n        const {\n          productId,\n          quantity: quantityToSet = 1\n        } = action.payload;\n        const productsInCart = [...state];\n\n        for (let i = 0; i < productsInCart.length; i++) {\n          const product = productsInCart[i];\n\n          if (product.id === productId) {\n            product.quantity = parseInt(quantityToSet);\n            break;\n          }\n        }\n\n        return productsInCart;\n      }\n\n    case REMOVE_PRODUCT_FROM_CART:\n      {\n        return state.filter(product => product.id !== action.payload);\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default cartReducer;","map":{"version":3,"sources":["D:/Grupo-easy/reducers/cart.js"],"names":["ADD_TO_CART","UPDATE_PRODUCT_QUANTITY","REMOVE_PRODUCT_FROM_CART","cartReducer","state","action","type","product","productToAdd","quantity","payload","productsInCart","isProductInCart","i","length","id","parseInt","push","productId","quantityToSet","filter"],"mappings":"AAAA,SACEA,WADF,EAEEC,uBAFF,EAGEC,wBAHF,QAIO,iBAJP;;AAMA,SAASC,WAAT,CAAqBC,KAAK,GAAG,EAA7B,EAAiCC,MAAjC,EAAyC;AACvC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAL;AAAkB;AAChB,cAAM;AAAEO,UAAAA,OAAO,EAAEC,YAAX;AAAyBC,UAAAA,QAAQ,GAAG;AAApC,YAA0CJ,MAAM,CAACK,OAAvD;AACA,cAAMC,cAAc,GAAG,CAAC,GAAGP,KAAJ,CAAvB;AAEA,YAAIQ,eAAe,GAAG,KAAtB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAAc,CAACG,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,gBAAMN,OAAO,GAAGI,cAAc,CAACE,CAAD,CAA9B;;AAEA,cAAIN,OAAO,CAACQ,EAAR,KAAeP,YAAY,CAACO,EAAhC,EAAoC;AAClCR,YAAAA,OAAO,CAACE,QAAR,GAAmBF,OAAO,CAACE,QAAR,GAAmBO,QAAQ,CAACP,QAAD,CAA9C;AACAG,YAAAA,eAAe,GAAG,IAAlB;AACA;AACD;AACF;;AAED,YAAI,CAACA,eAAL,EAAsB;AACpBJ,UAAAA,YAAY,CAACC,QAAb,GAAwBO,QAAQ,CAACP,QAAD,CAAhC;AACAE,UAAAA,cAAc,CAACM,IAAf,CAAoBT,YAApB;AACD;;AACD,eAAOG,cAAP;AACD;;AACD,SAAKV,uBAAL;AAA8B;AAC5B,cAAM;AAAEiB,UAAAA,SAAF;AAAaT,UAAAA,QAAQ,EAAEU,aAAa,GAAG;AAAvC,YAA6Cd,MAAM,CAACK,OAA1D;AACA,cAAMC,cAAc,GAAG,CAAC,GAAGP,KAAJ,CAAvB;;AAEA,aAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAAc,CAACG,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,gBAAMN,OAAO,GAAGI,cAAc,CAACE,CAAD,CAA9B;;AAEA,cAAIN,OAAO,CAACQ,EAAR,KAAeG,SAAnB,EAA8B;AAC5BX,YAAAA,OAAO,CAACE,QAAR,GAAmBO,QAAQ,CAACG,aAAD,CAA3B;AACA;AACD;AACF;;AAED,eAAOR,cAAP;AACD;;AACD,SAAKT,wBAAL;AAA+B;AAC7B,eAAOE,KAAK,CAACgB,MAAN,CAAcb,OAAD,IAAaA,OAAO,CAACQ,EAAR,KAAeV,MAAM,CAACK,OAAhD,CAAP;AACD;;AACD;AACE,aAAON,KAAP;AAzCJ;AA2CD;;AAED,eAAeD,WAAf","sourcesContent":["import {\n  ADD_TO_CART,\n  UPDATE_PRODUCT_QUANTITY,\n  REMOVE_PRODUCT_FROM_CART,\n} from \"../actions/cart\";\n\nfunction cartReducer(state = [], action) {\n  switch (action.type) {\n    case ADD_TO_CART: {\n      const { product: productToAdd, quantity = 1 } = action.payload;\n      const productsInCart = [...state];\n\n      let isProductInCart = false;\n      for (let i = 0; i < productsInCart.length; i++) {\n        const product = productsInCart[i];\n\n        if (product.id === productToAdd.id) {\n          product.quantity = product.quantity + parseInt(quantity);\n          isProductInCart = true;\n          break;\n        }\n      }\n\n      if (!isProductInCart) {\n        productToAdd.quantity = parseInt(quantity);\n        productsInCart.push(productToAdd);\n      }\n      return productsInCart;\n    }\n    case UPDATE_PRODUCT_QUANTITY: {\n      const { productId, quantity: quantityToSet = 1 } = action.payload;\n      const productsInCart = [...state];\n\n      for (let i = 0; i < productsInCart.length; i++) {\n        const product = productsInCart[i];\n\n        if (product.id === productId) {\n          product.quantity = parseInt(quantityToSet);\n          break;\n        }\n      }\n\n      return productsInCart;\n    }\n    case REMOVE_PRODUCT_FROM_CART: {\n      return state.filter((product) => product.id !== action.payload);\n    }\n    default:\n      return state;\n  }\n}\n\nexport default cartReducer;\n"]},"metadata":{},"sourceType":"module"}